"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/scraper.ts":
/*!*********************************!*\
  !*** ./src/services/scraper.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scraperService: function() { return /* binding */ scraperService; }\n/* harmony export */ });\nclass ScraperService {\n    initializeScrapers() {\n        // Card Hobby Scraper\n        this.scrapers.set(\"cardhobby\", {\n            name: \"Card Hobby\",\n            urlPattern: /cardhobby\\.com\\/#\\/carddetails\\/\\d+/,\n            rateLimit: {\n                maxRequests: 10,\n                timeWindow: 1000 * 60 // 1 minute\n            },\n            validateData: (data)=>{\n                var _data_data, _data_data1, _data_data2;\n                console.log(\"Validating Card Hobby data:\", data);\n                const isValid = (data === null || data === void 0 ? void 0 : (_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.imageUrl) != null && typeof (data === null || data === void 0 ? void 0 : (_data_data1 = data.data) === null || _data_data1 === void 0 ? void 0 : _data_data1.price) === \"number\" && typeof (data === null || data === void 0 ? void 0 : (_data_data2 = data.data) === null || _data_data2 === void 0 ? void 0 : _data_data2.title) === \"string\";\n                console.log(\"Validation result:\", isValid);\n                return isValid;\n            },\n            extractData: async (url, data)=>{\n                var _data_data, _data_data1, _data_data2, _data_data3;\n                console.log(\"Extracting Card Hobby data:\", data);\n                const imageUrl = ((_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.imageUrl) || \"\";\n                const currentBid = ((_data_data1 = data.data) === null || _data_data1 === void 0 ? void 0 : _data_data1.price) || 0;\n                const name = ((_data_data2 = data.data) === null || _data_data2 === void 0 ? void 0 : _data_data2.title) || \"Unknown Item\";\n                const sellerUrl = ((_data_data3 = data.data) === null || _data_data3 === void 0 ? void 0 : _data_data3.sellerUrl) || window.location.origin;\n                const result = {\n                    name,\n                    url,\n                    imageUrl,\n                    sellerUrl,\n                    bid: 0,\n                    currentBid,\n                    market: 0,\n                    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n                };\n                console.log(\"Extracted data:\", result);\n                return result;\n            }\n        });\n    // Add more scrapers here as needed\n    }\n    static getInstance() {\n        if (!ScraperService.instance) {\n            ScraperService.instance = new ScraperService();\n        }\n        return ScraperService.instance;\n    }\n    async waitForRateLimit(scraperName) {\n        const scraper = this.scrapers.get(scraperName);\n        if (!(scraper === null || scraper === void 0 ? void 0 : scraper.rateLimit)) return;\n        const now = Date.now();\n        const requests = this.requestCounts.get(scraperName) || [];\n        // Remove old requests outside the time window\n        const validRequests = requests.filter((time)=>now - time < scraper.rateLimit.timeWindow);\n        if (validRequests.length >= scraper.rateLimit.maxRequests) {\n            const oldestRequest = validRequests[0];\n            const waitTime = oldestRequest + scraper.rateLimit.timeWindow - now;\n            console.log(\"Rate limit reached for \".concat(scraperName, \", waiting \").concat(waitTime, \"ms\"));\n            await new Promise((resolve)=>setTimeout(resolve, waitTime));\n        }\n        // Update request count\n        this.requestCounts.set(scraperName, [\n            ...validRequests,\n            now\n        ]);\n    }\n    async fetchWithRetry(url, options) {\n        let timeout = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5000;\n        let lastError = null;\n        for(let attempt = 0; attempt < this.MAX_RETRIES; attempt++){\n            try {\n                console.log(\"Fetch attempt \".concat(attempt + 1, \" for \").concat(url));\n                const controller = new AbortController();\n                const id = setTimeout(()=>controller.abort(), timeout);\n                const response = await fetch(url, {\n                    ...options,\n                    signal: controller.signal\n                });\n                clearTimeout(id);\n                console.log(\"Fetch successful for \".concat(url, \", status: \").concat(response.status));\n                return response;\n            } catch (error) {\n                lastError = error;\n                console.error(\"Fetch attempt \".concat(attempt + 1, \" failed:\"), error);\n                if (attempt < this.MAX_RETRIES - 1) {\n                    const delay = this.RETRY_DELAY * Math.pow(2, attempt);\n                    console.log(\"Waiting \".concat(delay, \"ms before retry\"));\n                    await new Promise((resolve)=>setTimeout(resolve, delay));\n                }\n            }\n        }\n        throw lastError || new Error(\"Failed to fetch after retries\");\n    }\n    async handleCardHobbyScrape(url) {\n        var _url_match;\n        console.log(\"Starting Card Hobby scrape for URL:\", url);\n        // Extract card ID from URL like https://www.cardhobby.com/#/carddetails/67180979\n        const cardId = (_url_match = url.match(/carddetails\\/(\\d+)/)) === null || _url_match === void 0 ? void 0 : _url_match[1];\n        if (!cardId) {\n            throw new Error(\"Invalid URL format\");\n        }\n        console.log(\"Extracted card ID:\", cardId);\n        await this.waitForRateLimit(\"cardhobby\");\n        // Get the specific card details using the direct API endpoint\n        const apiUrl = \"https://gatewayapi.cardhobby.com/card/NewMyCommodity/GetCardDetail?cardId=\".concat(cardId, \"&lag=en&device=Web&version=1&appname=Card+Hobby\");\n        console.log(\"Fetching card details from:\", apiUrl);\n        try {\n            const response = await this.fetchWithRetry(apiUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"*/*\",\n                    \"Content-Type\": \"application/json\",\n                    \"Origin\": \"http://localhost:3000\",\n                    \"Referer\": \"http://localhost:3000/\",\n                    \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:139.0) Gecko/20100101 Firefox/139.0\",\n                    \"Accept-Language\": \"en-CA,en-US;q=0.7,en;q=0.3\",\n                    \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n                    \"Connection\": \"keep-alive\",\n                    \"Sec-Fetch-Dest\": \"empty\",\n                    \"Sec-Fetch-Mode\": \"cors\",\n                    \"Sec-Fetch-Site\": \"cross-site\"\n                },\n                mode: \"cors\",\n                credentials: \"omit\"\n            });\n            if (!response.ok) {\n                if (response.status === 404) {\n                    throw new Error(\"Card not found. Please verify the card ID is correct.\");\n                }\n                throw new Error(\"API request failed: \".concat(response.status));\n            }\n            const data = await response.json();\n            console.log(\"Card details response:\", data);\n            // Check if the response contains valid data\n            if (!(data === null || data === void 0 ? void 0 : data.data)) {\n                throw new Error(\"Invalid response format from API\");\n            }\n            return data;\n        } catch (error) {\n            console.error(\"Error fetching card details:\", error);\n            throw error;\n        }\n    }\n    isCacheValid(entry) {\n        return Date.now() - entry.timestamp < this.CACHE_DURATION;\n    }\n    async scrapeItem(url) {\n        console.log(\"Starting scrape for URL:\", url);\n        try {\n            // Check cache first\n            const cachedEntry = this.cache.get(url);\n            if (cachedEntry && this.isCacheValid(cachedEntry)) {\n                console.log(\"Returning cached data for:\", url);\n                return cachedEntry.data;\n            }\n            // Find the appropriate scraper for the URL\n            const scraper = Array.from(this.scrapers.values()).find((s)=>s.urlPattern.test(url));\n            if (!scraper) {\n                console.error(\"No scraper found for URL:\", url);\n                throw new Error(\"No scraper available for this URL\");\n            }\n            console.log(\"Found scraper:\", scraper.name);\n            let data;\n            if (scraper.name === \"Card Hobby\") {\n                data = await this.handleCardHobbyScrape(url);\n            } else {\n                console.error(\"Unsupported website:\", url);\n                throw new Error(\"Unsupported website\");\n            }\n            // Validate the data\n            if (!scraper.validateData(data)) {\n                console.error(\"Invalid data received:\", data);\n                throw new Error(\"Invalid data received from scraper\");\n            }\n            // Extract data using the scraper's extractData function\n            const extractedData = await scraper.extractData(url, data);\n            // Cache the result\n            this.cache.set(url, {\n                data: extractedData,\n                timestamp: Date.now()\n            });\n            console.log(\"Successfully scraped and cached data for:\", url);\n            return extractedData;\n        } catch (error) {\n            console.error(\"Error scraping item:\", error);\n            if (error instanceof Error) {\n                throw new Error(\"Failed to scrape item details: \".concat(error.message));\n            }\n            throw new Error(\"Failed to scrape item details\");\n        }\n    }\n    // Method to clear cache for a specific URL or all URLs\n    clearCache(url) {\n        if (url) {\n            this.cache.delete(url);\n            console.log(\"Cleared cache for URL:\", url);\n        } else {\n            this.cache.clear();\n            console.log(\"Cleared all cache\");\n        }\n    }\n    constructor(){\n        this.scrapers = new Map();\n        this.cache = new Map();\n        this.requestCounts = new Map();\n        this.CACHE_DURATION = 1000 * 60 * 5 // 5 minutes\n        ;\n        this.MAX_RETRIES = 3;\n        this.RETRY_DELAY = 1000 // 1 second\n        ;\n        this.initializeScrapers();\n    }\n}\nconst scraperService = ScraperService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/scraper.ts\n"));

/***/ })

});