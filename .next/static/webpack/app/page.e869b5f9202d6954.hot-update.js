"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/scraper.ts":
/*!*********************************!*\
  !*** ./src/services/scraper.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scraperService: function() { return /* binding */ scraperService; }\n/* harmony export */ });\nclass ScraperService {\n    static getInstance() {\n        if (!ScraperService.instance) {\n            ScraperService.instance = new ScraperService();\n        }\n        return ScraperService.instance;\n    }\n    async scrapeItem(url) {\n        try {\n            var _data_data, _data_data1;\n            // Extract the card ID from the URL\n            const cardId = url.split(\"/\").pop();\n            if (!cardId) {\n                throw new Error(\"Invalid URL format\");\n            }\n            // First, negotiate with the SignalR hub\n            const negotiateUrl = \"https://socket.cardhobby.com.cn/hubs/negotiate?cId=\".concat(cardId);\n            console.log(\"Negotiating with SignalR hub:\", negotiateUrl);\n            const negotiateResponse = await fetch(negotiateUrl, {\n                method: \"POST\",\n                headers: {\n                    \"Accept\": \"*/*\",\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\n                    \"Origin\": \"https://www.cardhobby.com\",\n                    \"Referer\": \"https://www.cardhobby.com/\",\n                    \"X-Requested-With\": \"XMLHttpRequest\"\n                }\n            });\n            if (!negotiateResponse.ok) {\n                throw new Error(\"SignalR negotiation failed: \".concat(negotiateResponse.status));\n            }\n            const negotiateData = await negotiateResponse.json();\n            console.log(\"Negotiation response:\", negotiateData);\n            // Now get the specific card details\n            const apiUrl = \"https://gatewayapi.cardhobby.com/card/NewMyCommodity/GetCardDetail?cardId=\".concat(cardId, \"&lag=en&device=Web&version=1&appname=Card+Hobby\");\n            console.log(\"Fetching from API URL:\", apiUrl);\n            const response = await fetch(apiUrl, {\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Origin\": \"https://www.cardhobby.com\",\n                    \"Referer\": \"https://www.cardhobby.com/\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"API request failed: \".concat(response.status));\n            }\n            const data = await response.json();\n            console.log(\"Received API data:\", data);\n            // Extract image and price from the API response\n            const imageUrl = ((_data_data = data.data) === null || _data_data === void 0 ? void 0 : _data_data.imageUrl) || \"\";\n            const currentBid = ((_data_data1 = data.data) === null || _data_data1 === void 0 ? void 0 : _data_data1.price) || 0;\n            console.log(\"Extracted values:\", {\n                imageUrl,\n                currentBid\n            });\n            return {\n                name: \"Unknown Item\",\n                url,\n                imageUrl,\n                sellerUrl: window.location.origin,\n                bid: 0,\n                currentBid,\n                market: 0,\n                date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n            };\n        } catch (error) {\n            console.error(\"Error scraping item:\", error);\n            throw new Error(\"Failed to scrape item details\");\n        }\n    }\n    constructor(){}\n}\nconst scraperService = ScraperService.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9zZXJ2aWNlcy9zY3JhcGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFFQSxNQUFNQTtJQUtKLE9BQU9DLGNBQThCO1FBQ25DLElBQUksQ0FBQ0QsZUFBZUUsUUFBUSxFQUFFO1lBQzVCRixlQUFlRSxRQUFRLEdBQUcsSUFBSUY7UUFDaEM7UUFDQSxPQUFPQSxlQUFlRSxRQUFRO0lBQ2hDO0lBRUEsTUFBTUMsV0FBV0MsR0FBVyxFQUE2QjtRQUN2RCxJQUFJO2dCQWlEZUMsWUFDRUE7WUFqRG5CLG1DQUFtQztZQUNuQyxNQUFNQyxTQUFTRixJQUFJRyxLQUFLLENBQUMsS0FBS0MsR0FBRztZQUNqQyxJQUFJLENBQUNGLFFBQVE7Z0JBQ1gsTUFBTSxJQUFJRyxNQUFNO1lBQ2xCO1lBRUEsd0NBQXdDO1lBQ3hDLE1BQU1DLGVBQWUsc0RBQTZELE9BQVBKO1lBQzNFSyxRQUFRQyxHQUFHLENBQUMsaUNBQWlDRjtZQUU3QyxNQUFNRyxvQkFBb0IsTUFBTUMsTUFBTUosY0FBYztnQkFDbERLLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ1AsVUFBVTtvQkFDVixnQkFBZ0I7b0JBQ2hCLFVBQVU7b0JBQ1YsV0FBVztvQkFDWCxvQkFBb0I7Z0JBQ3RCO1lBQ0Y7WUFFQSxJQUFJLENBQUNILGtCQUFrQkksRUFBRSxFQUFFO2dCQUN6QixNQUFNLElBQUlSLE1BQU0sK0JBQXdELE9BQXpCSSxrQkFBa0JLLE1BQU07WUFDekU7WUFFQSxNQUFNQyxnQkFBZ0IsTUFBTU4sa0JBQWtCTyxJQUFJO1lBQ2xEVCxRQUFRQyxHQUFHLENBQUMseUJBQXlCTztZQUVyQyxvQ0FBb0M7WUFDcEMsTUFBTUUsU0FBUyw2RUFBb0YsT0FBUGYsUUFBTztZQUNuR0ssUUFBUUMsR0FBRyxDQUFDLDBCQUEwQlM7WUFFdEMsTUFBTUMsV0FBVyxNQUFNUixNQUFNTyxRQUFRO2dCQUNuQ0wsU0FBUztvQkFDUCxVQUFVO29CQUNWLFVBQVU7b0JBQ1YsV0FBVztnQkFDYjtZQUNGO1lBRUEsSUFBSSxDQUFDTSxTQUFTTCxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSVIsTUFBTSx1QkFBdUMsT0FBaEJhLFNBQVNKLE1BQU07WUFDeEQ7WUFFQSxNQUFNYixPQUFPLE1BQU1pQixTQUFTRixJQUFJO1lBQ2hDVCxRQUFRQyxHQUFHLENBQUMsc0JBQXNCUDtZQUVsQyxnREFBZ0Q7WUFDaEQsTUFBTWtCLFdBQVdsQixFQUFBQSxhQUFBQSxLQUFLQSxJQUFJLGNBQVRBLGlDQUFBQSxXQUFXa0IsUUFBUSxLQUFJO1lBQ3hDLE1BQU1DLGFBQWFuQixFQUFBQSxjQUFBQSxLQUFLQSxJQUFJLGNBQVRBLGtDQUFBQSxZQUFXb0IsS0FBSyxLQUFJO1lBRXZDZCxRQUFRQyxHQUFHLENBQUMscUJBQXFCO2dCQUFFVztnQkFBVUM7WUFBVztZQUV4RCxPQUFPO2dCQUNMRSxNQUFNO2dCQUNOdEI7Z0JBQ0FtQjtnQkFDQUksV0FBV0MsT0FBT0MsUUFBUSxDQUFDQyxNQUFNO2dCQUNqQ0MsS0FBSztnQkFDTFA7Z0JBQ0FRLFFBQVE7Z0JBQ1JDLE1BQU0sSUFBSUMsS0FBS0EsS0FBS0MsR0FBRyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU1DLFdBQVc7WUFDOUQ7UUFDRixFQUFFLE9BQU9DLE9BQU87WUFDZDFCLFFBQVEwQixLQUFLLENBQUMsd0JBQXdCQTtZQUN0QyxNQUFNLElBQUk1QixNQUFNO1FBQ2xCO0lBQ0Y7SUE5RUEsYUFBc0IsQ0FBQztBQStFekI7QUFFTyxNQUFNNkIsaUJBQWlCdEMsZUFBZUMsV0FBVyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9zZXJ2aWNlcy9zY3JhcGVyLnRzPzNjMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlbSB9IGZyb20gJ0AvdHlwZXMvaXRlbSc7XG5cbmNsYXNzIFNjcmFwZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFNjcmFwZXJTZXJ2aWNlO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBTY3JhcGVyU2VydmljZSB7XG4gICAgaWYgKCFTY3JhcGVyU2VydmljZS5pbnN0YW5jZSkge1xuICAgICAgU2NyYXBlclNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgU2NyYXBlclNlcnZpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIFNjcmFwZXJTZXJ2aWNlLmluc3RhbmNlO1xuICB9XG5cbiAgYXN5bmMgc2NyYXBlSXRlbSh1cmw6IHN0cmluZyk6IFByb21pc2U8T21pdDxJdGVtLCAnaWQnPj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBFeHRyYWN0IHRoZSBjYXJkIElEIGZyb20gdGhlIFVSTFxuICAgICAgY29uc3QgY2FyZElkID0gdXJsLnNwbGl0KCcvJykucG9wKCk7XG4gICAgICBpZiAoIWNhcmRJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgVVJMIGZvcm1hdCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCwgbmVnb3RpYXRlIHdpdGggdGhlIFNpZ25hbFIgaHViXG4gICAgICBjb25zdCBuZWdvdGlhdGVVcmwgPSBgaHR0cHM6Ly9zb2NrZXQuY2FyZGhvYmJ5LmNvbS5jbi9odWJzL25lZ290aWF0ZT9jSWQ9JHtjYXJkSWR9YDtcbiAgICAgIGNvbnNvbGUubG9nKCdOZWdvdGlhdGluZyB3aXRoIFNpZ25hbFIgaHViOicsIG5lZ290aWF0ZVVybCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG5lZ290aWF0ZVJlc3BvbnNlID0gYXdhaXQgZmV0Y2gobmVnb3RpYXRlVXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0FjY2VwdCc6ICcqLyonLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAnT3JpZ2luJzogJ2h0dHBzOi8vd3d3LmNhcmRob2JieS5jb20nLFxuICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmNhcmRob2JieS5jb20vJyxcbiAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6ICdYTUxIdHRwUmVxdWVzdCdcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghbmVnb3RpYXRlUmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaWduYWxSIG5lZ290aWF0aW9uIGZhaWxlZDogJHtuZWdvdGlhdGVSZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5lZ290aWF0ZURhdGEgPSBhd2FpdCBuZWdvdGlhdGVSZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZygnTmVnb3RpYXRpb24gcmVzcG9uc2U6JywgbmVnb3RpYXRlRGF0YSk7XG5cbiAgICAgIC8vIE5vdyBnZXQgdGhlIHNwZWNpZmljIGNhcmQgZGV0YWlsc1xuICAgICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vZ2F0ZXdheWFwaS5jYXJkaG9iYnkuY29tL2NhcmQvTmV3TXlDb21tb2RpdHkvR2V0Q2FyZERldGFpbD9jYXJkSWQ9JHtjYXJkSWR9JmxhZz1lbiZkZXZpY2U9V2ViJnZlcnNpb249MSZhcHBuYW1lPUNhcmQrSG9iYnlgO1xuICAgICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIGZyb20gQVBJIFVSTDonLCBhcGlVcmwpO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnT3JpZ2luJzogJ2h0dHBzOi8vd3d3LmNhcmRob2JieS5jb20nLFxuICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmNhcmRob2JieS5jb20vJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSByZXF1ZXN0IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgQVBJIGRhdGE6JywgZGF0YSk7XG5cbiAgICAgIC8vIEV4dHJhY3QgaW1hZ2UgYW5kIHByaWNlIGZyb20gdGhlIEFQSSByZXNwb25zZVxuICAgICAgY29uc3QgaW1hZ2VVcmwgPSBkYXRhLmRhdGE/LmltYWdlVXJsIHx8ICcnO1xuICAgICAgY29uc3QgY3VycmVudEJpZCA9IGRhdGEuZGF0YT8ucHJpY2UgfHwgMDtcblxuICAgICAgY29uc29sZS5sb2coJ0V4dHJhY3RlZCB2YWx1ZXM6JywgeyBpbWFnZVVybCwgY3VycmVudEJpZCB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ1Vua25vd24gSXRlbScsXG4gICAgICAgIHVybCxcbiAgICAgICAgaW1hZ2VVcmwsXG4gICAgICAgIHNlbGxlclVybDogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgYmlkOiAwLFxuICAgICAgICBjdXJyZW50QmlkLFxuICAgICAgICBtYXJrZXQ6IDAsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2NyYXBpbmcgaXRlbTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzY3JhcGUgaXRlbSBkZXRhaWxzJyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzY3JhcGVyU2VydmljZSA9IFNjcmFwZXJTZXJ2aWNlLmdldEluc3RhbmNlKCk7ICJdLCJuYW1lcyI6WyJTY3JhcGVyU2VydmljZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJzY3JhcGVJdGVtIiwidXJsIiwiZGF0YSIsImNhcmRJZCIsInNwbGl0IiwicG9wIiwiRXJyb3IiLCJuZWdvdGlhdGVVcmwiLCJjb25zb2xlIiwibG9nIiwibmVnb3RpYXRlUmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsInN0YXR1cyIsIm5lZ290aWF0ZURhdGEiLCJqc29uIiwiYXBpVXJsIiwicmVzcG9uc2UiLCJpbWFnZVVybCIsImN1cnJlbnRCaWQiLCJwcmljZSIsIm5hbWUiLCJzZWxsZXJVcmwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIm9yaWdpbiIsImJpZCIsIm1hcmtldCIsImRhdGUiLCJEYXRlIiwibm93IiwidG9JU09TdHJpbmciLCJlcnJvciIsInNjcmFwZXJTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/scraper.ts\n"));

/***/ })

});